body {
	font-family: "Playfair Display";
	font-size: 20px;
	line-height: 1.3;
	background-color: #f4f4f4;
	color: #000; 
}

header {
	background-color: #000;
	border-top: solid 5px #FEEA34;
}

/* We apply our flex styles to the inner container rather than outer header element */
header .container {
	display: flex;
	justify-content: space-between;
	align-items: center;
}

header h1 {
	width: 75px;
}

a {
	text-decoration: none
}

.container {
	max-width: 960px;
	margin-left: auto;
	margin-right: auto;
	padding-right: 20px;
	padding-left: 20px;
}


.hero {
	background-image: url(img/hero.jpg);
	padding-top: 110px;
	padding-bottom: 120px;
	background-size: cover;
	background-position: right bottom;
}

.hero h2 {
	font-size: 36px;
	line-height: 1.33;
	font-weight: 700;
	margin-bottom: 20px;
}

.hero p {
	font-size: 24px;
	line-height: 1.33;
}

.intro {
	max-width: 440px;
}

.hero {
	margin-bottom: 30px;
}

.filters {
	margin-bottom: 20px;
}

.filters a {
	color: #000;
	font-size: 16px;
	margin-right: 15px;
}

.filters li {
	display: inline;
}

.show-filters {
	display: none;
}

.filters .selected {
	font-weight: 700;
	border-bottom: solid 3px #FEEA34;
	padding-bottom: 1px;
}

.products .container {
	 display: flex;
	/* By default, flexbox puts everything onto the same line, but by using flex-wrap it will allow us to have multiple rows. */
	flex-wrap: wrap; 
	
}

.product {
	width: 33.333%;
	/* We use our relativ position so that our overlay latches on and only positions itself inside the context of the product element. Otherwise it will position itself in relation to the page. */
	position: relative;
}

.products {
	margin-bottom: 60px;
}


/* 
	1. Hide the overlay
	2. position the overlay so it covers the image
	3. slightly transparent yellow background
	4. position the title and price in the top and bottom left

*/

.overlay {
	opacity: 0;
	position: absolute;
	background-color: rgba(254,234,52,0.7);
	width: 100%;
	height: 100%;
	left: 0;
	top: 0;
	padding: 15px;
	/* Here we used a transition timing from the graph editor in the developer tools which alloes us to add a bit more character to our transition. */
	transition: opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

.product:hover .overlay {
	opacity: 1;
}

.product h4,
.product p {
	font-weight: 700;
}

.product p {
	font-size: 36px;
	position: absolute;
	bottom: 15px;
	left: 15px;
}

.product h4 {
	font-size: 18px;
}

.filters .show-filters {
	color: #BFBFB7;
}

@media (max-width: 860px) {
	.hero {
		padding-top: 55px;
		padding-bottom: 60px;
	}

	.product {
		width: 50%;
	}

	.container {
		padding-left: 40px;
		padding-right: 40px;
	}
}

@media (max-width: 770px) {
	.hero {
		background-image: none;
		background-color: #BFBFB7;
		padding-top: 30px;
		padding-bottom: 30px;
	}

	.intro {
		max-width: none;
	}

}

@media (max-width: 540px) {
	.intro h2 {
		font-size: 18px;
		margin-bottom: 10px;
	}

	.intro p {
		font-size: 16px;
	}

	/* 20px is usually a good measuer of gutter/padding to have for mobile/smaller screens */
	.container {
		padding-left: 20px;
		padding-right: 20px;
	}
}

@media (max-width: 480px) {
	body {
		font-size: 16px;
	}

	.product {
		width: 100%;
		margin-bottom: 20px;
	}

	.filters li,
	.show-filters {
		display: block;
	}

	.filters li {
		margin-bottom: 3px;
	}

	.show-filters {
		margin-bottom: 5px;
	}

	.filters-list {
		display: none;
	}
}

@media (min-width: 480px) {

	/* Using the important rule makes sure a style gets applied regardless of how specific it is */
	.filters-list {
		display: block !important; 
	}

}







